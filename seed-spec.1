'\" t
.\"     Title: seed standard definition
.\"    Author: Jonathan Meyer, Mike Holt, Derick Faller, John Tobe
.\" Generator: Asciidoctor 1.5.5
.\"      Date: 2019-10-14
.\"    Manual: Seed Specification
.\"    Source: Seed Specification
.\"  Language: English
.\"
.TH "SEED\-SPEC" "1" "2019-10-14" "Seed Specification" "Seed Specification"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.LINKSTYLE blue R < >
.SH "NAME"
seed standard definition \- A general standard to aid in the discovery and consumption of a discrete unit of work contained within a Docker image.
.SH "INTRODUCTION"
.sp
Seed is a general standard to aid in the discovery and consumption of a discrete unit of work contained within a Docker
image. While initially developed to support the \c
.URL "http://ngageoint.github.io/scale/" "Scale" " "
data processing system with job
discovery, it is designed to be readily applied to other systems as well.
.sp
Seed compliant images must be named in a specific fashion due to the lack of label search capability on Docker Hub
and Registry services. The suffix \f[CR]\-seed\fP must be used when naming images to enable discovery, prior to Hub or
Registry push. This requirement will be deprecated as label search support is standardized across Docker registry
services. Use of the \c
.URL "http://github.com/ngageoint/seed\-cli" "CLI" " "
developed by the Seed team is highly recommended to speed
the development and packaging of jobs according to the Seed specification.
.SS "Format"
.sp
The Docker image created must adhere to a specific naming convention. The standard requires specification of both an
job and a packaging version, tracking changes individually between the job logic and the packaging of it.
The following image naming template maps to members defined under the Job Objects:
.sp
.if n \{\
.RS 4
.\}
.nf
<name>\-<jobVersion>\-seed:<packageVersion>
.fi
.if n \{\
.RE
.\}
.sp
Dockerfile snippet containing required label for Seed compliance:
.sp
.if n \{\
.RS 4
.\}
.nf
FROM alpine

ENTRYPOINT /app/job.sh

LABEL com.ngageoint.seed.manifest="{\(rs"seedVersion\(rs":\(rs"1.0.0\-snapshot\(rs",\(rs"job\(rs":{ ... }}"
.fi
.if n \{\
.RE
.\}
.sp
The \f[CR]com.ngageoint.seed.manifest\fP label contents must be serialized as a string\-escaped JSON object. The following is a
complete example including required and optional keys:
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "seedVersion": "1.0.0\-snapshot",
  "job": {
    "name": "my\-job",
    "jobVersion": "1.0.0",
    "packageVersion": "1.0.0",
    "title": "My first job",
    "description": "Reads an HDF5 file and outputs two png images, a CSV and manifest containing cell_count",
    "tags": [
      "hdf5",
      "png",
      "csv",
      "image processing"
    ],
    "maintainer": {
      "name": "John Doe",
      "organization": "E\-corp",
      "email": "jdoe@example.com",
      "url": "http://www.example.com",
      "phone": "666\-555\-4321"
    },
    "timeout": 3600,
    "interface": {
      "command": "${INPUT_FILE} ${OUTPUT_DIR} ${VERSION}",
      "inputs": {
        "files": [
          {
            "name": "INPUT_FILE",
            "required": true,
            "mediaTypes": [
              "image/x\-hdf5\-image"
            ],
            "partial": true
          }
        ],
        "json": [
          {
            "name": "INPUT_JSON",
            "type": "string",
            "required": true
          }
        ]
      },
      "outputs": {
        "files": [
          {
            "name": "output_file_pngs",
            "mediaType": "image/png",
            "multiple": true,
            "pattern": "outfile*.png"
          },
          {
            "name": "output_file_csv",
            "mediaType": "text/csv",
            "pattern": "outfile*.csv",
            "required": false
          }
        ],
        "json": [
          {
            "name": "cell_count",
            "key": "cellCount",
            "type": "integer"
          },
          {
            "name": "dummy",
            "type": "integer",
            "required": false
          }
        ]
      },
      "mounts": [
        {
          "name": "MOUNT_PATH",
          "path": "/the/container/path",
          "mode": "ro"
        },
        {
          "name": "WRITE_PATH",
          "path": "/write",
          "mode": "rw"
        }
      ],
      "settings": [
        {
          "name": "VERSION",
          "secret": false
        },
        {
          "name": "DB_HOST",
          "secret": false
        },
        {
          "name": "DB_PASS",
          "secret": true
        }
      ]
    },
    "resources": {
      "scalar": [
        {
          "name": "cpus",
          "value": 1
        },
        {
          "name": "mem",
          "value": 1024
        },
        {
          "name": "sharedMem",
          "value": 1024
        },
        {
          "name": "disk",
          "value": 1000,
          "inputMultiplier": 4
        }
      ]
    },
    "errors": [
      {
        "code": 1,
        "name": "error\-name\-one",
        "title": "Error Name",
        "description": "Error Description",
        "category": "data"
      },
      {
        "code": 2,
        "name": "error\-name\-two",
        "title": "Error Name",
        "description": "Error Description",
        "category": "job"
      }
    ]
  }
}
.fi
.if n \{\
.RE
.\}
.SS "Definitions"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Seed specific terms defined in the Glossary supersede all following definitions. These terms can be found
\fIitalicized\fP throughout the specification.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
GeoJSON, and the terms Geometry and Polygon are defined in
.URL "https://tools.ietf.org/html/rfc7946" "RFC 7946 GeoJSON" ""
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Internet Assigned Numbers Authority (IANA), and the terms Media Types and MIME Types are defined in
.URL "http://www.iana.org/assignments/media\-types/media\-types.xhtml" "IETF RFC 6838" ""
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ISO 8601 and the specifics of the date format are defined in \c
.URL "https://tools.ietf.org/html/rfc3339" "IETF RFC 3339" ""
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
JavaScript Object Notation (JSON), and the terms object, name, value, array, integer, and number, are defined in
.URL "http://json\-schema.org/latest/json\-schema\-validation.html" "JSON Schema" "."
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Semantic Versioning (SemVer), and the terms major, minor, and patch version are defined at
.URL "http://semver.org/spec/v2.0.0.html" "" ""
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in \c
.URL "http://www.ietf.org/rfc/rfc2119.txt" "IETF RFC 2119" "."
.RE
.SH "STANDARD"
.sp
The Seed standard is intended to provide a complete definition of the runtime processing, memory and storage
requirements of a discrete unit of work, in addition to the inputs, outputs and potential errors produced.
Completeness is fundamental but the standard accommodates both simple and complex jobs by defining a minimal subset of
REQUIRED properties. The following sections detail every possible REQUIRED and OPTIONAL manifest property in both root
and child objects.
.sp
A complete Seed object contained within a \f[CR]com.ngageoint.seed.manifest\fP label is always a string\-escaped serialized
object. In Seed, an object consists of a collection of name/value pairs \(em; also called members. For each member, the
name is always a string. Member values are either a string, number, object, array or one of the literals: true, false,
and null. An array consists of elements where each element is a value as described above.
.SS "Seed Object"
.sp
The Seed object is the root JSON object that MUST be placed within a \f[CR]com.ngageoint.seed.manifest\fP Docker image label.
At a minimum this object MUST define the \f[CR]seedVersion\fP and \f[CR]job\fP names.
.sp
\fBseedVersion\fP
.RS 4
Required. MUST be a string that conforms to the SemVer standard.
.RE
.sp
\fBjob\fP
.RS 4
Required. MUST be a Job Objects.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "seedVersion": "1.0.0\-snapshot",
  "job": { ... }
}
.fi
.if n \{\
.RE
.\}
.SS "Job Object"
.sp
The Job object is the core member for describing a single unit of work and the resources it requires.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric or dash characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9\-]+$\fP).
.RE
.sp
\fBjobVersion\fP
.RS 4
Required. MUST be a string that conforms to the SemVer standard.
.RE
.sp
\fBpackageVersion\fP
.RS 4
Required. MUST be a string that conforms to the SemVer standard.
.RE
.sp
\fBtitle\fP
.RS 4
Required. MUST be a string and SHOULD contain a short descriptive title of the job.
.RE
.sp
\fBdescription\fP
.RS 4
Required. MUST be a string and SHOULD contain a full job abstract.
.RE
.sp
\fBtags\fP
.RS 4
Optional. MUST be an array of strings and MAY contain any number of elements.
.RE
.sp
\fBtimeout\fP
.RS 4
Required. MUST be a integer indicating a timeout period measured in seconds. Consuming systems MUST honor this value as a hard limit on job execution time.
.RE
.sp
\fBmaintainer\fP
.RS 4
Required. MUST be an object as defined in Maintainer Object.
.RE
.sp
\fBresources\fP
.RS 4
Recommended. MUST be an object as defined in Resources Object. It is highly advised that this member be specified, without it resources provided will be default for the implementing framework.
.RE
.sp
\fBinterface\fP
.RS 4
Optional. MUST be an object as defined in Interface Object.
.RE
.sp
\fBerrors\fP
.RS 4
Optional. MUST be an array containing elements defined in Errors Objects
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Job object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "name": "my\-job", \fB(1)\fP
    "jobVersion": "1.0.0", \fB(2)\fP
    "packageVersion": "1.0.0", \fB(3)\fP
    "title": "My first job", \fB(4)\fP
    "description": "Reads an HDF5 file and outputs two TIFF images, a CSV and manifest containing cell_count", \fB(5)\fP
    "timeout": 3600,\fB(6)\fP
    "maintainer": { ... }, \fB(7)\fP
    "resources": { ... }, \fB(8)\fP
    "interface": { ... }, \fB(9)\fP
    "errors": [ ... ] \fB(10)\fP
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required string containing job identifier. \f[CR]name\fP and \f[CR]jobVersion\fP members combined should be unique system\-wide.
T}
\fB(2)\fP\h'-2n':T{
Required string containing version identifier of job in SemVer format. \f[CR]name\fP and \f[CR]jobVersion\fP members
combined should be unique system\-wide.
T}
\fB(3)\fP\h'-2n':T{
Required string containing packaging version identifier in SemVer format. \f[CR]packageVersion\fP is used to indicate
updates to the job interface, it should NEVER be used to indicate changes to the job.
T}
\fB(4)\fP\h'-2n':T{
Required string containing short job title.
T}
\fB(5)\fP\h'-2n':T{
Required string containing job abstract. Inline markup should be avoided, but not prohibited.
T}
\fB(6)\fP\h'-2n':T{
Required integer containing job timeout value in seconds.
T}
\fB(7)\fP\h'-2n':T{
Required Maintainer Object.
T}
\fB(8)\fP\h'-2n':T{
Optional Resources Object.
T}
\fB(9)\fP\h'-2n':T{
Optional Interface Object.
T}
\fB(10)\fP\h'-2n':T{
Optional array of Errors Objects.
T}
.TE
.SS "Maintainer Object"
.sp
The Maintainer object is the member that identifies the individual and organization (optional) acting as a point of
contact for a Seed job.
.sp
\fBname\fP
.RS 4
Required. MUST be a string and SHOULD contain the full name of maintaining individual.
.RE
.sp
\fBemail\fP
.RS 4
Required. MUST be a string and SHOULD contain the best contact email for maintaining individual or organization.
.RE
.sp
\fBphone\fP
.RS 4
Optional. MUST be a string and SHOULD contain the best contact phone number for maintaining individual or organization.
.RE
.sp
\fBorganization\fP
.RS 4
Optional. MUST be a string and SHOULD contain the organization responsible for maintaining or sponsoring Seed job.
.RE
.sp
\fBurl\fP
.RS 4
Optional. MUST be a string and SHOULD contain a publicly accessible URL to complete job design or usage documentation.
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Maintainer object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "name": "John Doe", \fB(1)\fP
    "email": "jdoe@example.com", \fB(2)\fP
    "phone": "666\-555\-4321", \fB(3)\fP
    "organization": "E\-corp", \fB(4)\fP
    "url": "http://www.example.com" \fB(5)\fP
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required string containing full name of maintaining individual.
T}
\fB(2)\fP\h'-2n':T{
Required string containing best contact email for maintaining individual or organization.
T}
\fB(3)\fP\h'-2n':T{
Optional string containing best contact phone number for maintaining individual or organization.
T}
\fB(4)\fP\h'-2n':T{
Optional string containing organization responsible for maintaining or sponsoring Seed job.
T}
\fB(5)\fP\h'-2n':T{
Optional string containing publicly accessible URL to complete job design or usage documentation.
T}
.TE
.SS "Resources Object"
.sp
The Resources object is the member that identifies all resource requirements for a job. This is most commonly CPU,
memory and disk scalar resources, but MAY in the future accommodate more complex types such as ranges and sets. The
final computed resources allocated for all \f[CR]scalar\fP elements MUST be injected as environment variables to the job at run
time. Reference Environment Variables and Resource Defaults for clarification on what the implementing framework
MUST provide.
.sp
\fBscalar\fP
.RS 4
Required. MUST be an array of \f[CR]Scalar\fP objects and MAY contain any number of elements. There is no other standard restriction on the array size.
.RE
.sp
.B Scalar Object
.br
The Scalar objects MAY include any arbitrary custom resource name, but there are reserved resources \f[CR]cpus\fP, \f[CR]disk\fP,
\f[CR]mem\fP and \f[CR]sharedMem\fP that have special meaning. The reserved resource names \f[CR]cpus\fP, \f[CR]disk\fP and \f[CR]mem\fP SHOULD be
populated by all Seed compliant images, as the defaults provided at runtime will likely be inadequate to run all but the
most minimal job. The \f[CR]sharedMem\fP resource applies primarily to high\-performance and scientific applications
and will rarely be needed.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the resource required by the job. Refer to Injection for details on environment variable
available at execution time.
.RE
.sp
\fBvalue\fP
.RS 4
Required. MUST be a number indicating the quantity of the resource required by the job. When dealing with storage resources such as \f[CR]mem\fP or \f[CR]disk\fP units of Mebibytes (MiB) MUST be used.
.RE
.sp
\fBinputMultiplier\fP
.RS 4
Optional. MUST be a number indicating the factor by which input file size is multiplied and added to the constant value for resource.
.RE
.sp
Use of \f[CR]inputMultiplier\fP for \f[CR]mem\fP or \f[CR]disk\fP resource types is useful when memory or output disk requirements of a job
are a function of input file size. The following basic formula computes the resource requirement when an
\f[CR]inputMultiplier\fP is defined.
.sp
.if n \{\
.RS 4
.\}
.nf
resourceRequirement = inputVolume * inputMultiplier + constantValue
.fi
.if n \{\
.RE
.\}
.sp
For example, when total input file size is 2.0MiB and an \f[CR]inputMultiplier\fP of \f[CR]4.0\fP and \f[CR]value\fP of \f[CR]0.1\fP is
specified for \f[CR]disk\fP, the following computes the resource requirement:
.sp
.if n \{\
.RS 4
.\}
.nf
diskRequirement = 2.0MiB * 4.0 + 0.1MiB
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[
    { "name": "cpus", "value": 1.0 }, \fB(1)\fP
    { "name": "disk", "value": 4.0, "inputMultiplier": 4.0 }, \fB(2)\fP
    { "name": "mem", "value": 64.0, "inputMultiplier": 4.0 }, \fB(3)\fP
    ... \fB(4)\fP
]
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Recommended Scalar object demonstrating single constant scalar value for specifying CPU requirement of job.
T}
\fB(2)\fP\h'-2n':T{
Optional Scalar object demonstrating single constant scalar value in addition to a multiplier based on total input
file size for scaling disk requirement of job. This multiplier allows for scaling the output disk space required as a
function of input file size.
T}
\fB(3)\fP\h'-2n':T{
Recommended Scalar object demonstrating single constant scalar value in addition to a multiplier based on total
input file size for scaling memory requirement of job.
T}
\fB(4)\fP\h'-2n':T{
Optional additional Scalar objects for any custom resources needed by job.
T}
.TE
.SS "Interface Object"
.sp
The Interface object is the primary member that describes the command arguments, environment variables,
mounts, settings, inputs and outputs defined for a job.
.sp
\fBcommand\fP
.RS 4
Optional. MUST be a string specifying the complete string passed to the container at run time. Based on the Linux shell, shell escaping of special characters MAY be required. If a Docker ENTRYPOINT is defined that launches the executable, omission
of the executable MAY be necessary in \f[CR]command\fP string. The Seed \f[CR]command\fP member can be treated as analogous to the
Docker CMD statement.
.RE
.sp
\fBinputs\fP
.RS 4
Optional. MUST be an object as defined in Inputs Object.
.RE
.sp
\fBoutputs\fP
.RS 4
Optional. MUST be an object as defined in Outputs Object.
.RE
.sp
\fBmounts\fP
.RS 4
Optional. MUST be an array of \f[CR]Mounts\fP objects (see Mounts Object) and MAY contain any number of elements. There is no  other standard restriction on the array size.
.RE
.sp
\fBsettings\fP
.RS 4
Optional. MUST be an array of \f[CR]Settings\fP objects (see Settings Object) and MAY contain any number of elements. There is no other standard restriction on the array size.
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Interface object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "command": "/app/job.sh ${INPUT_FILE} ${OUTPUT_DIR}", \fB(1)\fP
    "inputs": { "files": [ { "name": "INPUT_FILE", ... }, ... ] }, \fB(2)\fP
    "outputs": { ... }, \fB(3)\fP
    "mounts": [ ... ], \fB(4)\fP
    "settings": [ ... ] \fB(5)\fP
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Optional string indicating the job arguments. Reference Environment Variables for clarification on what the
implementing framework MUST provide. Linux shell escaping MAY be needed in the case of special characters.
T}
\fB(2)\fP\h'-2n':T{
Optional Inputs Object. This is the means to inject external data into the job container.
T}
\fB(3)\fP\h'-2n':T{
Optional Outputs Object. This is the means to capture results from the job container.
T}
\fB(4)\fP\h'-2n':T{
Optional Mounts Object. This defines any directories that need to be mounted into the job container.
T}
\fB(5)\fP\h'-2n':T{
Optional Settings Object. This defines any environment specific settings needed at run time.
T}
.TE
.SS "Inputs Object"
.sp
The Inputs object is the member responsible for indicating immutable input data available to the Seed image at
runtime.
.sp
\fBfiles\fP
.RS 4
Optional. MUST be an array of objects defined in the Files Object sub\-section.
.RE
.sp
\fBjson\fP
.RS 4
Optional. MUST be an array of objects defined in the JSON Object sub\-section.
\&.Files Object
.RE
.sp
Critical implementation details related to \f[CR]multiple\fP member should be referenced in
environment variables. The following table defines the \f[CR]files\fP object members.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the unique name to use for referring to this input. All inputs will be passed as environment variables, with
the environment variable names based upon the input names. Refer to Injection for details on environment
variables available at execution time.
.RE
.sp
\fBmediaTypes\fP
.RS 4
Optional. MUST be an array of strings that MUST indicate the IANA Media types that the job accepts. An executorâ€  MAY use any provided media types to report validation warnings to the user in the case of mismatched types.
.RE
.sp
\fBmultiple\fP
.RS 4
Optional. MUST be a boolean indicating whether multiple physical files are processed by this \f[CR]Files\fP element. If omitted, the default value MUST be treated as false. If true, the value injected into the \f[CR]command\fP placeholder will be an absolute directory
containing all files for this input. If false or omitted, the value injected into the \f[CR]command\fP placeholder will be an
absolute path to a single file.
.RE
.sp
\fBpartial\fP
.RS 4
Optional. MUST be a boolean indicating whether input file is required in whole or in part. This allows an executorâ€  to make intelligent choices when providing very large files to a job. This should only be set to true if the job is expected to
use less than half of very large input files. If omitted, the default value MUST be treated as false.
.RE
.sp
\fBrequired\fP
.RS 4
Optional. MUST be a boolean indicating whether this input value SHOULD always be expected. If omitted, the default value MUST be treated as true.
.RE
.sp
.B JSON Object
.br
The following table defines the \f[CR]json\fP object members.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the unique name to use for referring to this input. All inputs will be passed as environment variables, with
the environment variable names based upon the input names. Refer to Injection for details on environment
variables available at execution time.
.RE
.sp
\fBtype\fP
.RS 4
Required. MUST be a string and indicate a valid JSON schema type.
.RE
.sp
\fBrequired\fP
.RS 4
Optional. MUST be a boolean indicating whether this input value SHOULD always be expected. If omitted, the default value MUST be treated as true.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "files": [ \fB(1)\fP
        {
            "name": "INPUT_FILE", \fB(2)\fP
            "mediaTypes": [ "image/x\-hdf5\-image" ], \fB(3)\fP
            "multiple": false, \fB(4)\fP
            "partial": true, \fB(5)\fP
            "required": true \fB(6)\fP
        },
        ...
    ]
    "json": [ \fB(7)\fP
        {
            "name": "INPUT_STRING",\fB(8)\fP
            "type": "string", \fB(9)\fP
            "required": false \fB(10)\fP
        }
    ]
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Optional array containing elements defined by Files Object sub\-section.
T}
\fB(2)\fP\h'-2n':T{
Required string containing unique name used to refer to this input.
T}
\fB(3)\fP\h'-2n':T{
Optional array containing a list of accepted media types.
T}
\fB(4)\fP\h'-2n':T{
Optional boolean indicating whether this element represents multiple files (flat directory) vs one file (false).
Default is \f[CR]false\fP.
T}
\fB(5)\fP\h'-2n':T{
Optional boolean indicating that a job consumes only a small portion of input file. Default is \f[CR]false\fP.
T}
\fB(6)\fP\h'-2n':T{
Optional boolean indicating whether job requires this particular file. Default is \f[CR]true\fP.
T}
\fB(7)\fP\h'-2n':T{
Optional array containing elements defined by JSON Object sub\-section.
T}
\fB(8)\fP\h'-2n':T{
Required string containing unique name used to refer to this input.
T}
\fB(9)\fP\h'-2n':T{
Required string containing a valid JSON schema type for input validation.
T}
\fB(10)\fP\h'-2n':T{
Optional boolean indicating whether job requires this particular JSON input. Default is \f[CR]true\fP.
T}
.TE
.SS "Outputs Object"
.sp
The Outputs object is the member responsible for indicating all output data and the means to capture that data
following the execution of a Seed image. Data can be captured in two different forms: directly as a file or
extracted JSON from a manifest. File type output is simply matched based on a standard glob pattern. Recursively scanning
directories is NOT supported, but a known subdirectory structure will work (e.g. base/sub\-\fB/\fP.ext).  JSON objects are
expected to be gathered from a JSON manifest that by Seed standard convention MUST be written at the root of the job
output directory as \f[CR]seed.outputs.json\fP. The absolute path to the job output directory is REQUIRED to be passed
into the container at job execution time in the \f[CR]OUTPUT_DIR\fP environment variable. Special attention should be given to
output file permissions and support is provided for defining
extended metadata.
.sp
\fBfiles\fP
.RS 4
Optional. MUST be an array of objects defined in the Files Object sub\-section.
.RE
.sp
\fBjson\fP
.RS 4
Optional. MUST be an array of objects defined in the JSON Object sub\-section.
\&.Files Object
The following table defines the \f[CR]files\fP object members.
.RE
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the unique name to use for referring to this output.
.RE
.sp
\fBmediaType\fP
.RS 4
Optional. MUST indicate the IANA Media type for the file being captured by Outputs.
.RE
.sp
\fBpattern\fP
.RS 4
Required. MUST indicate a standard glob pattern for the capture of files.
.RE
.sp
\fBmultiple\fP
.RS 4
Optional. MUST be a boolean indicating whether multiple output files may be captured by this \f[CR]Files\fP element. If omitted, the default value MUST be treated as false.
.RE
.sp
\fBrequired\fP
.RS 4
Optional. MUST be a boolean indicating whether this input value SHOULD always be expected. If omitted, the default value is \f[CR]true\fP.
.RE
.sp
.B JSON Object
.br
The following table defines the \f[CR]json\fP object members.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the unique name to use for referring to this output. When \f[CR]key\fP member is omitted, it must be a
case\-sensitive match of the member key in \f[CR]seed.outputs.json\fP file.
.RE
.sp
\fBtype\fP
.RS 4
Required. MUST be a string indicating the JSON schema type of the member being captured from the \f[CR]seed.outputs.json\fP file.
.RE
.sp
\fBkey\fP
.RS 4
Optional. MUST be a string indicating the case\-sensitive \f[CR]seed.outputs.json\fP member to capture. If omitted, the member key is assumed to be a case\-sensitive match for the above defined \f[CR]name\fP member.
.RE
.sp
\fBrequired\fP
.RS 4
Optional. MUST be a boolean indicating whether this input value SHOULD always be expected. If omitted, the default value MUST be treated as true.
.RE
.sp
Seed \f[CR]outputs\fP object snippet:
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "files": [ \fB(1)\fP
        {
            "name": "OUTPUT_TIFFS", \fB(2)\fP
            "mediaType": "image/tiff", \fB(3)\fP
            "pattern": "outfile*.tif", \fB(4)\fP
            "multiple": false, \fB(5)\fP
            "required": true \fB(6)\fP
        },
        ...
    ],
    "json": [ \fB(7)\fP
        {
            "name": "CELL_COUNT", \fB(8)\fP
            "type": "integer", \fB(9)\fP
            "key": "cellCount" \fB(10)\fP
        },
        ...
    ]
}
.fi
.if n \{\
.RE
.\}
.sp
seed.outputs.json:
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "cellCount": 256, \fB(11)\fP
    ...
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Optional array containing elements defined by Files Object sub\-section.
T}
\fB(2)\fP\h'-2n':T{
Required string containing unique output identifier.
T}
\fB(3)\fP\h'-2n':T{
Optional string containing IANA Media type of file.
T}
\fB(4)\fP\h'-2n':T{
Required string containing glob expression for file capture. Executorâ€  is expected to
capture output relative to OUTPUT_DIR.
T}
\fB(5)\fP\h'-2n':T{
Optional boolean indicating whether a single or multiple values are supported. Default value is false.
T}
\fB(6)\fP\h'-2n':T{
Optional boolean indicating whether executorâ€  should assume failure if output data is missing. Default value
is true.
T}
\fB(7)\fP\h'-2n':T{
Optional array containing elements defined by JSON Object sub\-section.
T}
\fB(8)\fP\h'-2n':T{
Required string containing unique output identifier. MUST be used by executorâ€  to match member for capture from
\f[CR]seed.outputs.json\fP in absence of \f[CR]key\fP member.
T}
\fB(9)\fP\h'-2n':T{
Required string containing JSON schema type of member extracted from \f[CR]seed.outputs.json\fP file.
T}
\fB(10)\fP\h'-2n':T{
Optional string containing key of member for extraction. This allows mapping from a \f[CR]seed.outputs.json\fP file
member key that differs from the value of \f[CR]name\fP member.
T}
\fB(11)\fP\h'-2n':T{
Example output manifest containing key defined in (10).
T}
.TE
.SS "Mounts Object"
.sp
The Mounts object is the member responsible for indicating any additional directories that must be mounted into the
container for the Job to run. A mount directory is typically a shared file system directory that contains some set of
reference data that the Job requires.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) that correlates mount references elsewhere in the Interface to an external mount configuration that specifies how the
mount is provided.
.RE
.sp
\fBpath\fP
.RS 4
Required. MUST be an absolute file system path specifying where in the container the Job expects the shared directory to be mounted.
.RE
.sp
\fBmode\fP
.RS 4
Optional. MUST be a string that either specifies "ro" for read\-only access to the directory or "rw" for read\-write access. Default value is "ro".
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Mounts object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
[
    {
        "name": "MOUNT1", \fB(1)\fP
        "path": "/the/container/path", \fB(2)\fP
        "mode": "ro" \fB(3)\fP
    },
    ...
]
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required string containing the name to be used to lookup uses in the Interface.
T}
\fB(2)\fP\h'-2n':T{
Required string indicating the absolute file system path where the directory should be mounted.
T}
\fB(3)\fP\h'-2n':T{
Optional string indicating whether the directory should be mounted in read\-only ("ro") or read\-write ("rw") mode.
T}
.TE
.SS "Settings Object"
.sp
The Settings object is the member responsible for indicating all content not related to data that is needed for the
Seed job to run. These will be exposed as environment variables at run time. Most commonly, Settings will be used for
environment specific configuration or external credentials.
.sp
While it is \fIhighly\fP advised that Seed jobs SHOULD limit input / output to the provided constructs (\f[CR]inputs\fP /
\f[CR]outputs\fP), there are justified use cases for violating this encapsulation. If database ingestion or downstream
 messaging are necessary, this is a reasonable mechanism to accomplish that.
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the environment variable to be injected at run time. Refer to Injection for details on
environment variable available at execution time.
.RE
.sp
\fBsecret\fP
.RS 4
Optional. MUST be a boolean that indicates whether the value associated with the named setting is secret and stored as a secure string.
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Settings object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
[
   {
       "name": "SETTING1", \fB(1)\fP
       "secret": true \fB(2)\fP
   },
   ...
]
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required string containing the environment variable name to be injected at run time.
T}
\fB(2)\fP\h'-2n':T{
Optional boolean indicating whether the setting value is sensitive and stored as a secret.
T}
.TE
.SS "Errors Object"
.sp
The Errors object allows for developersâ€  to map arbitrary exit codes to meaningful textual descriptions. This is useful
in passing information to the executorâ€  to differentiate between data and job errors.
.sp
\fBcode\fP
.RS 4
Required. MUST be an integer indicating the exit code of the executing job process.
.RE
.sp
\fBname\fP
.RS 4
Required. MUST be a string of only alphanumeric, dash or underscore characters (defined by the regexâ€  \f[CR]^[a\-zA\-Z0\-9_\-]+$\fP) indicating the unique name to use for referring to this error. An executorâ€  MAY use member for correlation
of error codes across job versions.
.RE
.sp
\fBtitle\fP
.RS 4
Optional. MUST be a string indicating the short descriptive title of the error.
.RE
.sp
\fBdescription\fP
.RS 4
Optional. MUST be a string indicating the complete error description and possible causes.
.RE
.sp
\fBcategory\fP
.RS 4
Optional. MUST be a string containing one of the following values: \f[CR]job\fP or \f[CR]data\fP. If omitted, the default value is \f[CR]job\fP.
.RE
.sp
\fIThe following annotated snippet provides quick reference to the use of Errors object:\fP
.sp
.if n \{\
.RS 4
.\}
.nf
[
    {
        "code": 1, \fB(1)\fP
        "name": "error\-name", \fB(2)\fP
        "title": "Error Name", \fB(3)\fP
        "description": "Error Description", \fB(4)\fP
        "category": "job" \fB(5)\fP
    },
    ...
]
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required integer indicating job process exit code.
T}
\fB(2)\fP\h'-2n':T{
Required string containing machine\-friendly identifier of error.
T}
\fB(3)\fP\h'-2n':T{
Optional string containing human\-friendly short name of error.
T}
\fB(4)\fP\h'-2n':T{
Optional string containing complete error code description.
T}
\fB(5)\fP\h'-2n':T{
Optional string containing the error type. This value MUST be either: \f[CR]job\fP or \f[CR]data\fP. The default
value is \f[CR]job\fP.
T}
.TE
.SH "USAGE"
.SS "Implementing"
.sp
A few requirements must be satisfied when an implementerâ€  is building a system capable of executing Seed standardized
images. The following sections detail behavior that is expected of the executorâ€ , but these details are also important
for developersâ€  to understand what execution context they are provided.
.SS "Environment Variables"
.sp
Environment variable injection MUST be performed as it is the primary means of providing the context required by the
defined interface of a Seed job. These environment variables MAY be consumed by a job directly or shell variable
expansion MAY be leveraged in the \f[CR]interface.command\fP member. Implementing frameworks MAY perform variable expansion,
but it MUST follow Bash expansion conventions.
.SS "Normalization"
.sp
All environment variables injected MUST be normalized to remove any special characters. The majority of environment
variable injection is dynamic and tied to \f[CR]name\fP member values. These values MUST be sanitized based on the following
rules:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Only upper\-case alphabetic, numeric and underscore characters are permitted unaltered.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All lower\-case alphabetic characters MUST be capitalized.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All dash characters MUST be replaced with underscores.
.RE
.SS "Injection"
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Warning
.ps -1
.br
.sp
Collisions between the reserved variables below and \f[CR]interface.inputs.files\fP, \f[CR]interface.inputs.json\fP and
\f[CR]interface.settings\fP \f[CR]name\fP member values MUST NOT occur.
.sp .5v
.RE
.sp
The following variables MUST be provided:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OUTPUT_DIR: Absolute path where all output products MUST be placed by job for Seed executorâ€  capture.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All \f[CR]name\fP member values of \f[CR]resources.scalar\fP elements MUST map to environment variables. This SHALL be done by
normalizing all \f[CR]name\fP values and prefixing with \f[CR]ALLOCATED_\fP. For a \f[CR]my\-demo\-resourceNew\fP
with a value of \f[CR]5.0\fP, an environment variable \f[CR]ALLOCATED_MY_DEMO_RESOURCENEW\fP SHALL be set to \f[CR]5.0\fP at run time. For a
resource with an \f[CR]inputMultiplier\fP value the environment variable must include the final computed \fIoutput\fP resource
allocation as defined in the \f[CR]scalar\fP element under Resources object. It SHOULD be clarified that
the allocated value computed using an \f[CR]inputMultiplier\fP value MUST NOT include the size of input files \- only the
additional space needed for output files during execution.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All \f[CR]name\fP member values of \f[CR]interface.inputs.files\fP elements MUST map to environment variables. Variable names
must follow normalization rules. Executor\(cqsâ€  MUST ensure data is mounted and
provide a container resolvable absolute path. \fIInjection behavior is dependent on the boolean value of \f[CR]multiple\fP
member.\fP When \f[CR]multiple\fP is \f[CR]true\fP the injected environment variable MUST be an absolute path to a \fIdirectory\fP with all
files immediately beneath it. When \f[CR]multiple\fP is \f[CR]false\fP it MUST be an absolute path to the single \fIfile\fP provided. This
environment variable MUST be left unset if member \f[CR]required\fP is false and the input is not present.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All \f[CR]name\fP member values of \f[CR]interface.inputs.json\fP elements MUST map to environment variables. Variable names
must follow normalization rules and \f[CR]array\fP, \f[CR]object\fP and \f[CR]string\fP JSON types MUST be
injected string encoded. This environment variable MUST be left unset if \f[CR]required\fP is false and the input is not
present.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All \f[CR]name\fP member values of \f[CR]interface.settings\fP elements MUST map to environment variables. Variable names
must follow normalization rules.
.RE
.sp
Supporting complex variable expansion where jobs require parameters associated with a switch can be accomplished with
use of Bash. Taking the example of an optional \f[CR]inputs.files\fP element, the following \f[CR]command\fP value will expand with
a preceding switch only when the input is available:
.sp
\f[CR]${MY_INPUT/#/\-d }\fP
.sp
This will expand to \f[CR]\-d ${MY_INPUT}\fP only when \f[CR]MY_INPUT\fP is set, otherwise the entire expression will be omitted. It
is important to note this is specifically a Bash shell feature and is not present with competing Linux shells.
.SS "Output Data Capture"
.sp
All output data generated by a Seed compliant job MUST be placed within the location identified by OUTPUT_DIR
environment variable. This location MUST be made available by the executorâ€  so that the job is given full write
access. Developers MUST ensure any files captured by \f[CR]interface.outputs.files\fP member element \f[CR]pattern\fP values, as well
as the optional \f[CR]seed.outputs.json\fP file, are marked with read permissions at minimum. This MAY be done with the
following sample command: \f[CR]chmod +r yourfile.txt\fP
.sp
Special attention should also be given to the number of files matched per \f[CR]interface.outputs.files\fP element to ensure it
is consistent in plurality to that defined by \f[CR]multiple\fP member. If multiple files are matched using the \f[CR]pattern\fP
member value, while the \f[CR]multiple\fP member is set to false, these jobs SHOULD be failed by the executorâ€ . On the other
hand, even if multiple files are not present when \f[CR]multiple\fP is true it SHOULD NOT force a job failure by the executorâ€ .
.SS "Extended File Metadata"
.sp
There is often a need by the executorâ€  to capture additional job extracted metadata on output files. The Seed
standard allows for this through the use of side\-car files. The side\-car files must be named exactly as the file they
describe, with the addition of the \f[CR].metadata.json\fP extension to the original file name (extension included). The file
must be formatted according to the Seed Metadata Schema. This allows for both
spatial and any custom associated metadata to be specified. The \f[CR]properties\fP member is of the object type which allows
for any JSON member type that satisfies your specific use\-cases.
.sp
The following snippet is a notional example specifying a geometry and temporal bounded feature associated with a file:
.sp
.B Metadata JSON
.br
.sp
.if n \{\
.RS 4
.\}
.nf
{
    "type": "Feature", { \fB(1)\fP
    "geometry": { \fB(2)\fP
        "type": "Polygon",
        "coordinates": [
            [ [ 100.0, 0.0 ], [ 101.0, 0.0 ], [ 101.0, 1.0 ], [ 100.0, 1.0 ], [ 100.0, 0.0 ] ]
        ]
    },
    "properties": { \fB(3)\fP
        "time": {
            "start": "2016\-08\-06T00:00:00.000Z",
            "end": "2016\-08\-06T00:00:00.000Z"
        }
    }
}
.fi
.if n \{\
.RE
.\}
.TS
tab(:);
r lw(\n(.lu*75u/100u).
\fB(1)\fP\h'-2n':T{
Required string indicating the GeoJSON type being defined.
T}
\fB(2)\fP\h'-2n':T{
Required geometry member defining spatial extent of file.
T}
\fB(3)\fP\h'-2n':T{
Required properties member containing example definition temporal extent of file.
T}
.TE
.SS "Resource Defaults"
.sp
At a minimum, the executorâ€  MUST provide at least the resources indicated by a Seed manifest at run time. If the
resource requirement specified by the manifest is below the minimum amount allowed by the executorâ€  it MAY increase the
requirement to that value. Developersâ€  SHOULD specify the \f[CR]cpus\fP, \f[CR]mem\fP and \f[CR]disk\fP requirements of their Seed job, but
if these are not set, the executorâ€  is free to allocate minimal defaults.
.sp
For the \f[CR]sharedMem\fP reserved resource, the executorâ€  SHOULD make use of the Docker run argument \f[CR]shm\-size\fP to provide
the requested resource.
.sp
When resources are indicated by a Seed manifest that are not recognized by an executorâ€ , the job SHOULD not be run.
.SS "Examples"
.sp
The Seed standard is intended to support both simple and complex job packaging. To that end the standard allows for
sensible defaults to take the place of a fully specified manifest. The following examples identify both a minimal
Seed use and a more realistic, fully exercised standard.
.SS "Random Number Generator Job"
.sp
Minimal manifest demonstrating the simplest possible Seed definition.
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "seedVersion": "1.0.0\-snapshot",
  "job": {
    "name": "random\-number\-gen",
    "jobVersion": "0.1.0",
    "packageVersion": "0.1.0",
    "title": "Random Number Generator",
    "description": "Generates a random number and outputs on stdout",
    "maintainer": {
      "name": "John Doe",
      "email": "jdoe@example.com"
    },
    "timeout": 10
  }
}
.fi
.if n \{\
.RE
.\}
.sp
Serialized as a label in a Dockerfile snippet:
.sp
.if n \{\
.RS 4
.\}
.nf
FROM alpine

ENTRYPOINT /app/job.sh

LABEL com.ngageoint.seed.manifest="{\(rs"seedVersion\(rs":\(rs"1.0.0\-snapshot\(rs",\(rs"job\(rs":{\(rs"name\(rs":\(rs"random\-number\-gen\(rs",\(rs"jobVersion\(rs":\(rs"0.1.0\(rs",\(rs"packageVersion\(rs":\(rs"0.1.0\(rs",\(rs"title\(rs":\(rs"Random Number Generator\(rs",\(rs"description\(rs":\(rs"Generates a random number and outputs on stdout\(rs",\(rs"maintainer\(rs":{\(rs"name\(rs":\(rs"John Doe\(rs",\(rs"email\(rs":\(rs"jdoe@example.com\(rs"},\(rs"timeout\(rs":10}}"
.fi
.if n \{\
.RE
.\}
.SS "Image Watermark Job"
.sp
Image watermark job taking a single image and returning with watermark applied using Seed definition.
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "seedVersion": "1.0.0\-snapshot",
  "job": {
    "name": "image\-watermark",
    "jobVersion": "0.1.0",
    "packageVersion": "0.1.0",
    "title": "Image Watermarker",
    "description": "Processes an input PNG and outputs watermarked PNG.",
    "maintainer": {
      "name": "John Doe",
      "email": "jdoe@example.com"
    },
    "timeout": 30,
    "interface": {
      "command": "${INPUT_IMAGE} ${OUTPUT_DIR}",
      "inputs": {
        "files": [
          {
            "name": "INPUT_IMAGE"
          }
        ]
      },
      "outputs": {
        "files": [
          {
            "name": "OUTPUT_IMAGE",
            "pattern": "*_watermark.png"
          }
        ]
      }
    },
    "resources": {
      "scalar": [
        {
          "name": "cpus",
          "value": 1
        },
        {
          "name": "mem",
          "value": 64
        }
      ]
    },
    "errors": [
      {
        "code": 1,
        "name": "image\-Corrupt\-1",
        "description": "Image input is not recognized as a valid PNG.",
        "category": "data"
      },
      {
        "code": 2,
        "name": "algorithm\-failure"
      }
    ]
  }
}
.fi
.if n \{\
.RE
.\}
.sp
Serialized as a label in a Dockerfile snippet:
.sp
.if n \{\
.RS 4
.\}
.nf
FROM alpine

ENTRYPOINT /app/watermark.py

LABEL com.ngageoint.seed.manifest="{\(rs"seedVersion\(rs":\(rs"1.0.0\-snapshot\(rs",\(rs"job\(rs":{\(rs"name\(rs":\(rs"image\-watermark\(rs",\(rs"jobVersion\(rs":\(rs"0.1.0\(rs",\(rs"packageVersion\(rs":\(rs"0.1.0\(rs",\(rs"title\(rs":\(rs"Image Watermarker\(rs",\(rs"description\(rs":\(rs"Processes an input PNG and outputs watermarked PNG.\(rs",\(rs"maintainer\(rs":{\(rs"name\(rs":\(rs"John Doe\(rs",\(rs"email\(rs":\(rs"jdoe@example.com\(rs"},\(rs"timeout\(rs":30,\(rs"interface\(rs":{\(rs"command\(rs":\(rs"\(rs${INPUT_IMAGE} \(rs${OUTPUT_DIR}\(rs",\(rs"inputs\(rs":{\(rs"files\(rs":[{\(rs"name\(rs":\(rs"INPUT_IMAGE\(rs"}]},\(rs"outputs\(rs":{\(rs"files\(rs":[{\(rs"name\(rs":\(rs"OUTPUT_IMAGE\(rs",\(rs"pattern\(rs":\(rs"*_watermark.png\(rs"}]}},\(rs"resources\(rs":{\(rs"scalar\(rs":[{\(rs"name\(rs":\(rs"cpus\(rs",\(rs"value\(rs":1},{\(rs"name\(rs":\(rs"mem\(rs",\(rs"value\(rs":64}]},\(rs"errors\(rs":[{\(rs"code\(rs":1,\(rs"name\(rs":\(rs"image\-Corrupt\-1\(rs",\(rs"description\(rs":\(rs"Image input is not recognized as a valid PNG.\(rs",\(rs"category\(rs":\(rs"data\(rs"},{\(rs"code\(rs":2,\(rs"name\(rs":\(rs"algorithm\-failure\(rs"}]}}"
.fi
.if n \{\
.RE
.\}
.SH "DISCOVERY"
.sp
A primary intention of this standard is for simple job discovery from public images hosted within either Docker Hub,
Docker Trusted Registry or Docker Registry. There is significant fragmentation of APIs between the various Docker
offerings and the following sections describe the steps that may be taken to access the labels defined by Seed.
.sp
None of the Docker registry services support label search in any fashion. This incurs the requirement of applying a
secondary means to subset image results. The standard presently requires that all job images are named with the suffix
\f[CR]\-seed\fP. This allows for quick filtering of results to a manageable set for discovery.
.SS "Docker Hub"
.sp
Docker Hub stores Docker image manifest information in a readily accessible format only for Automated Builds. This
enforces the need for all developersâ€  wishing to support simple discovery from Docker Hub to support Hub builds, as
opposed to local image builds followed by a docker push. Given this caveat, a service such as ImageLayers can be used
to quickly identify manifest content after discovering available images.
.sp
The following two steps may be taken to find and identify labels within Docker Hub:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perform HTTP GET to find Docker images:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
URL: \c
.URL "https://hub.docker.com/v2/search/repositories/?query=\-seed" "" ""
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perform HTTP POST to get label details for images found in previous request:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BODY: {"repos":[{"name":"myorg/myjob\-seed","tag":"latest"}]}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
URL: \c
.URL "https://imagelayers.io/registry/analyze" "" ""
.RE
.RE
.sp
The ImageLayers service is a 3rd\-party service by CenturyLink Labs, but the source code is openly available at
.URL "https://github.com/CenturyLinkLabs/imagelayers" "ImageLayers" " "
and can be used as a reference implementation.
.SS "Docker Registry"
.sp
Docker Registry does not natively support any type of search, but does provide a catalog API that allows for listing the
entire registry contents. Using this along with tag and manifest inspection will allow label inspection.
.sp
The following steps may be taken to find and identify labels of Seed compliant images within Docker Registry:
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
All references to \f[CR]{registry}\fP, \f[CR]{image\-id}\fP and \f[CR]{tag}\fP in the following URLs should be replaced with your
environment specific values.
.sp .5v
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perform HTTP GET against catalog endpoint to find \f[CR]\-seed\fP suffixed images:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
URL: \c
.URL "http://{registry}/v2/_catalog" "" ""
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perform HTTP GET against tags endpoint for each image matched:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.URL "http://{registry}/v2/{image\-id}/tags/list" "" ""
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perform HTTP GET against manifests endpoint to retrieve labels per tag (extract labels from history JSON member):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.URL "http://{registry}/v2/{image\-id}/manifests/{tag}" "" ""
.RE
.RE
.SS "Docker Trusted Registry"
.sp
There is a ticket in with Docker Trusted Registry team to natively support label search. Presently there is no API
support to inspect hosted images for label metadata. Images must be pulled locally for inspection.
.SS "Silo"
.sp
The Seed team has developed a tool to overcome these limitations in Docker registries called \c
.URL "https://github.com/ngageoint/seed\-silo" "Silo" "."
.sp
Silo offers a REST API, implemented by the Seed team, for discovering Seed images. The API
allows users to scan one or more repositories for Seed images and then search the resulting images and their manifests
by keywords. An executorâ€  can leverage these endpoints to assist users in discovering Seed images and creating
jobs out of them.
.SH "GLOSSARY"
.sp
The following terms are specific to Seed and are provided to clarify their meaning. They are marked with a dagger (â€ )
throughout the document.
.sp
\fBdeveloper\fP
.RS 4
creator and packager of Seed compliant image
.RE
.sp
\fBexecutor\fP
.RS 4
process responsible for injecting run\-time context (inputs, mounts and environment settings) and capturing all
.RE
.sp
\fBimplementer\fP
.RS 4
developer of framework for discovering or running Seed compliant images \- must provide executor
.RE
.sp
\fBregex\fP
.RS 4
short hand for "Regular Expression," a text string that defines a pattern to be applied to other strings. \c
.URL "http://regexr.com/" "More info" ""
.RE
.sp
\fBglob\fP
.RS 4
a string defining a pattern to be applied to files on *nix operating systems. \c
.URL "http://man7.org/linux/man\-pages/man7/glob.7.html" "More info" ""
.RE
.SH "SCHEMA"
.SS "Seed Manifest"
.sp
The following JSON Schema should be used to validate Seed manifests prior to label serialization into a Dockerfile
for publish. It may be downloaded here: \c
.URL "schema/seed.manifest.schema.json" "Seed Manifest Schema" ""
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "$schema": "http://json\-schema.org/draft\-04/schema#",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "seedVersion": {
      "type": "string",
      "pattern": "^1\(rs\.0\(rs\.0\-snapshot$"
    },
    "job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a\-zA\-Z0\-9\-]+$"
        },
        "jobVersion": {
          "type": "string",
          "pattern": "^(0|[1\-9][0\-9]*)\(rs\.(0|[1\-9][0\-9]*)\(rs\.(0|[1\-9][0\-9]*)(\-(0|[1\-9][0\-9]*|[0\-9]*[a\-zA\-Z\-][0\-9a\-zA\-Z\-]*)(\(rs\.(0|[1\-9][0\-9]*|[0\-9]*[a\-zA\-Z\-][0\-9a\-zA\-Z\-]*))*)?(\(rs\+[0\-9a\-zA\-Z\-]+(\(rs\.[0\-9a\-zA\-Z\-]+)*)?$"
        },
        "packageVersion": {
          "type": "string",
          "pattern": "^(0|[1\-9][0\-9]*)\(rs\.(0|[1\-9][0\-9]*)\(rs\.(0|[1\-9][0\-9]*)(\-(0|[1\-9][0\-9]*|[0\-9]*[a\-zA\-Z\-][0\-9a\-zA\-Z\-]*)(\(rs\.(0|[1\-9][0\-9]*|[0\-9]*[a\-zA\-Z\-][0\-9a\-zA\-Z\-]*))*)?(\(rs\+[0\-9a\-zA\-Z\-]+(\(rs\.[0\-9a\-zA\-Z\-]+)*)?$"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maintainer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "organization": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "email"
          ]
        },
        "timeout": {
          "type": "integer"
        },
        "resources": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "scalar": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                  },
                  "value": {
                    "type": "number"
                  },
                  "inputMultiplier": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "required": [
                "scalar"
              ]
            }
          }
        },
        "interface": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "command": {
              "type": "string"
            },
            "inputs": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                      },
                      "required": {
                        "type": "boolean",
                        "default": true
                      },
                      "mediaTypes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "multiple": {
                        "type": "boolean",
                        "default": false
                      },
                      "partial": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "json": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                      },
                      "required": {
                        "type": "boolean",
                        "default": true
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "array",
                          "boolean",
                          "integer",
                          "number",
                          "object",
                          "string"
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "type"
                    ]
                  }
                }
              }
            },
            "outputs": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                      },
                      "mediaType": {
                        "type": "string"
                      },
                      "pattern": {
                        "type": "string"
                      },
                      "multiple": {
                        "type": "boolean",
                        "default": false
                      },
                      "required": {
                        "type": "boolean",
                        "default": true
                      }
                    },
                    "required": [
                      "name",
                      "pattern"
                    ]
                  }
                },
                "json": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                      },
                      "key": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "array",
                          "boolean",
                          "integer",
                          "number",
                          "object",
                          "string"
                        ]
                      },
                      "required": {
                        "type": "boolean",
                        "default": true
                      }
                    },
                    "required": [
                      "name",
                      "type"
                    ]
                  }
                }
              }
            },
            "mounts": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                  },
                  "path": {
                    "type": "string"
                  },
                  "mode": {
                    "enum": [
                      "ro",
                      "rw"
                    ],
                    "default": "ro"
                  }
                },
                "required": [
                  "name",
                  "path"
                ]
              }
            },
            "settings": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a\-zA\-Z0\-9_\-]+$"
                  },
                  "secret": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "code": {
                "type": "integer"
              },
              "name": {
                "type": "string",
                "pattern": "^[a\-zA\-Z0\-9_\-]+$"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "category": {
                "type": "string",
                "default": "job",
                "enum": [
                  "job",
                  "data"
                ]
              }
            },
            "required": [
              "code",
              "name"
            ]
          }
        }
      },
      "required": [
        "name",
        "jobVersion",
        "packageVersion",
        "title",
        "description",
        "maintainer",
        "timeout"
      ]
    }
  },
  "required": [
    "seedVersion",
    "job"
  ]
}
.fi
.if n \{\
.RE
.\}
.SS "Seed Metadata"
.sp
The following JSON Schema should be used to validate the side\-car metadata files generated alongside Seed job output
files. It may be downloaded here: \c
.URL "schema/seed.metadata.schema.json" "Seed Metadata Schema" ""
.sp
.if n \{\
.RS 4
.\}
.nf
{
  "$schema": "http://json\-schema.org/draft\-04/schema#",
  "id": "https://tools.ietf.org/html/rfc7946#",
  "title": "Geo JSON object",
  "description": "Schema for a Geo JSON object",
  "type": "object",
  "required": [ "type" ],
  "properties": {
    "bbox": { "$ref": "http://json\-schema.org/geojson/bbox.json#" }
  },
  "oneOf": [
    { "$ref": "#/definitions/geometry" },
    { "$ref": "#/definitions/geometryCollection" },
    { "$ref": "#/definitions/feature" },
    { "$ref": "#/definitions/featureCollection" }
  ],
  "definitions": {
    "geometry": {
      "type": "object",
      "required": [
        "type",
        "coordinates"
      ],
      "oneOf": [
        {
          "title": "Point",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "Point"
              ]
            },
            "coordinates": {
              "$ref": "#/definitions/position"
            }
          }
        },
        {
          "title": "MultiPoint",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "MultiPoint"
              ]
            },
            "coordinates": {
              "$ref": "#/definitions/positionArray"
            }
          }
        },
        {
          "title": "LineString",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "LineString"
              ]
            },
            "coordinates": {
              "$ref": "#/definitions/lineString"
            }
          }
        },
        {
          "title": "MultiLineString",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "MultiLineString"
              ]
            },
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/lineString"
              }
            }
          }
        },
        {
          "title": "Polygon",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "Polygon"
              ]
            },
            "coordinates": {
              "$ref": "#/definitions/polygon"
            }
          }
        },
        {
          "title": "MultiPolygon",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "MultiPolygon"
              ]
            },
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/polygon"
              }
            }
          }
        }
      ]
    },
    "geometryCollection": {
      "title": "GeometryCollection",
      "description": "A collection of geometry objects",
      "required": [ "geometries" ],
      "properties": {
        "type": { "enum": [ "GeometryCollection" ] },
        "geometries": {
          "type": "array",
          "items": { "$ref": "#/definitions/geometry" }
        }
      }
    },
    "feature": {
      "title": "Feature",
      "description": "A Geo JSON feature object",
      "required": [ "geometry", "properties" ],
      "properties": {
        "type": { "enum": [ "Feature" ] },
        "geometry": {
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/geometry" }
          ]
        },
          "properties": { "type": [ "object", "null" ] },
          "id": { "type": [ "string", "number" ] }
      }
    },
    "featureCollection": {
      "title": "FeatureCollection",
      "description": "A Geo JSON feature collection",
      "required": [ "features" ],
      "properties": {
        "type": { "enum": [ "FeatureCollection" ] },
        "features": {
          "type": "array",
          "items": { "$ref": "#/definitions/feature" }
        }
      }
    },
      "position": {
        "description": "A single position",
        "type": "array",
        "minItems": 2,
        "maxItems": 3,
        "items": [
          {
            "type": "number"
          },
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "additionalItems": false
      },
      "positionArray": {
        "description": "An array of positions",
        "type": "array",
        "items": {
          "$ref": "#/definitions/position"
        }
      },
      "lineString": {
        "description": "An array of two or more positions",
        "allOf": [
          {
            "$ref": "#/definitions/positionArray"
          },
          {
            "minItems": 2
          }
        ]
      },
      "linearRing": {
        "description": "An array of four positions where the first equals the last",
        "allOf": [
          {
            "$ref": "#/definitions/positionArray"
          },
          {
            "minItems": 4
          }
        ]
      },
      "polygon": {
        "description": "An array of linear rings",
        "type": "array",
        "items": {
          "$ref": "#/definitions/linearRing"
        }
      }
  }
}
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR(S)"
.sp
\fBJonathan Meyer, Mike Holt, Derick Faller, John Tobe\fP
.RS 4
Author(s).
.RE