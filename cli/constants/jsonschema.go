// Code generated by go-bindata.
// sources:
// ../spec/schema/seed.manifest.schema.json
// ../spec/schema/seed.metadata.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SpecSchemaSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x08\x6c\x0f\x7e\x54\xb1\x03\xf4\xb2\x7b\x29\x02\xc4\x87\x1e\x92\x16\x4d\x9b\x43\x6c\x23\xa0\xa5\xb1\xcc\x8d\x24\xaa\x14\xd5\xc2\xed\xfa\xbf\x17\x94\xbc\x6b\x3d\x86\x0f\x39\x6b\xa7\x8b\x75\x2e\xf1\x0e\xe7\x49\xcd\x7c\x33\x12\xf9\xef\xc0\xf3\xc8\xf7\x79\xb0\x85\x84\x92\x5b\x8f\x6c\xa5\xcc\x6e\xa7\xd3\xbb\x9c\xa7\x7e\x45\x7d\xc5\x45\x34\x0d\x05\xdd\x48\x7f\xf6\xe3\xb4\xa2\x7d\x47\x7e\x50\x72\x72\x97\x81\x12\xe2\xeb\x3b\x08\x64\x45\xa3\x61\xc8\x24\xe3\x29\x8d\x7f\x15\x3c\x03\x21\x19\xe4\xe4\xd6\xdb\xd0\x38\x87\x92\x21\xab\x93\x95\x79\xcf\x23\x39\x40\xf8\x11\x44\xce\x78\xfa\x48\xac\xe9\xcf\xa5\x60\x69\x54\xea\x2f\xe9\x19\x95\x12\x84\x62\x25\x1f\xe6\xf3\xb7\x9f\x3f\xce\x7f\xfb\xf0\xf3\x2f\xef\x49\xb9\xbe\xaf\xd8\xc8\x1d\x5f\x63\xba\x6a\xbe\x96\x74\x9b\xbf\x95\xc1\xae\xcf\x25\x3d\xa5\x09\x34\x28\x7a\xa7\xdb\x8e\x2f\xa8\xff\xcf\xcc\xbf\xf9\xec\xaf\x26\xe4\x91\x65\x7f\xe4\x26\x34\x8e\xb8\x60\x72\x9b\x74\x37\xa6\x8f\x9d\xe1\xec\x7e\xf1\xda\xbf\x59\x2d\x66\xfe\xcd\x6a\x3c\x5a\x2e\x5f\x59\x29\x43\xbf\x49\xb8\xaf\xfe\x53\x1e\xbf\xf1\x3f\xf9\x25\xf5\xe1\xf7\x78\x34\xec\x28\x30\xf3\x8f\xc6\xa3\x9f\x86\xcb\xe5\xa4\x4e\x9d\x28\x25\x0d\x82\xe2\xc2\xf7\x25\xa3\xc1\x17\x1a\xc1\x75\x57\x1a\xbb\x22\x99\x8c\x6d\xa9\x88\x0a\x86\x90\x07\x82\x65\xd2\xbe\x97\xb8\x5d\x1a\xe9\xc4\xa8\x10\x74\xd7\x7c\x02\x4c\x42\x92\xb7\xf8\x0d\x86\x3c\x6f\x8f\x97\x46\x21\xb7\x5c\xbc\xb7\x17\x9f\x41\x7a\x9e\x50\x16\x9f\x2e\xfe\x87\x38\x49\x58\xb2\x04\x78\x21\x75\xa2\x2c\x95\x10\x81\xc0\x65\xd5\xa2\xd8\xd0\x40\x1b\x74\x0b\xda\x3c\x57\x78\xf3\x0c\x10\x57\xae\x05\x49\xd8\x21\x1a\x1f\x5b\xc3\xf1\x83\xf3\x59\x21\xdf\x52\x49\x4d\x8a\x90\x00\x7a\x05\x61\x0b\xa4\x5c\xdf\xb0\x58\xb3\x64\xcc\xdd\x63\x24\x68\x0e\xbb\xc6\x72\x42\x44\x6e\x71\x1d\xb8\x90\x8e\xa4\x71\x10\x41\xc8\xb6\xc5\x66\xb7\x7a\xe3\x7f\x6a\x76\xab\xe6\xbf\xbd\x4e\x13\x11\xf0\x67\xc1\x04\x60\x39\x84\xf8\xb5\xe6\x3c\x06\x9a\x9a\x1c\x0b\x61\x43\x8b\x58\x55\x91\x14\x05\xf4\xf6\x27\x81\x90\xd1\xdf\x2b\x73\x0e\x0e\xe9\x73\xe1\xc0\x68\xce\x88\x96\x36\xac\x58\x1a\x6e\xf7\x0f\xa7\x88\x25\xcb\x3a\xe8\xaf\xb1\xdf\x6b\x7b\xcb\x7c\xd4\x39\x84\xd2\x35\x6e\xd6\x73\x60\x61\xcc\x5d\x87\xa7\x86\x72\xac\x10\x6a\xd7\x45\xc4\x3d\xa2\x66\xdd\x2b\x1e\xbc\x60\x3c\x90\xce\x50\x60\xdf\x23\x48\x8b\xc4\x90\xe3\x25\x8f\x0d\x50\x3c\x97\xa0\xbd\xe3\xb4\x60\x64\x4a\x8b\x64\x6d\xe3\x31\xe6\xe6\x81\xc7\x86\x5b\x58\xfd\x79\xdf\x00\x26\xe4\xd7\x22\xc4\xc0\xf4\x77\x7b\xac\xe1\x85\xbc\xce\x35\x27\x46\xe4\x16\xd7\x81\xeb\xff\x88\x63\x3d\xe7\x08\x73\x05\xe9\xcd\x1c\xdd\x3d\xa3\x91\x80\x17\x69\xfb\xb5\xc4\x6c\xc2\x09\x8f\xc9\x6b\xc7\x07\x31\x2c\xdf\x8e\x27\xf7\xcb\xe5\x78\xf4\x6c\x3a\xca\x37\x9b\x80\xac\xb9\x72\x1d\x91\x9e\x37\xb4\x7c\x81\xdd\x79\xeb\xfd\x3a\xf3\x9c\x73\xe6\x79\xe1\x40\x75\xd9\x19\x2c\x51\xad\x0b\xab\x70\x0b\x34\x19\x60\xc9\x0e\x49\x3d\xe1\xc8\x0e\x45\x66\x18\x3a\x0b\x04\xa1\x09\xa0\xe4\xb7\xce\x7e\x38\x6b\x4d\x78\x68\x88\xce\x82\x20\x44\x70\x7d\xb2\x89\xbf\x35\xa9\xa6\x49\xef\xda\x70\x22\x38\x1a\x80\x53\x4b\xb4\x54\x89\xbe\x42\xaa\x0d\xee\x2c\xb4\x2b\xc3\x9c\xf3\x02\x72\x5e\x88\x00\xcd\xa6\xcb\xbe\x76\xe4\x01\x8d\xa9\xb8\x0e\x07\x17\x1c\x0e\xfe\xa2\x71\xe1\xe8\xd4\xa1\x13\xf6\x36\x51\x7e\xae\x7f\x57\x7d\x58\x64\xa0\x7b\xbc\xfd\x8c\x5d\xb8\x09\x55\xbb\xe4\xde\x85\xd0\xe4\xb4\xba\xf1\x90\xff\xc8\x62\xd7\x4a\xbf\xbe\x96\x83\x94\x2c\x8d\xae\x9d\xed\x29\xba\x5a\x0e\x81\x00\xfd\x0b\xae\xe3\xc8\xe5\xf0\x69\xfc\x09\xbb\x47\xdf\x1e\x31\xc0\x7e\xd7\x4f\x10\x41\x08\x2e\xde\xd1\x2c\x53\x1b\xfd\x64\xa7\xb6\x68\x26\xf5\xc8\x22\x73\x06\x91\x40\x37\x39\xe8\x4f\x4d\x3b\x91\x3f\x08\x20\x87\xe4\x2d\x5d\xf8\x5c\xd3\x55\xa5\x3f\x36\x3f\x51\x61\x40\x25\x44\x5c\xe0\xaf\x7d\xf6\x22\xa9\x8f\x35\x8f\x37\x47\x30\x3e\xc3\xa8\x65\x14\x54\x26\xa8\xa4\xf8\x4a\xbe\xcb\x25\x24\x5f\x3f\xd4\x68\x8b\xa2\xca\x02\xcd\x03\x1d\xe8\x4c\xd6\xaa\x60\xd0\x32\x89\x1b\x6b\xb7\x94\xee\x25\x1c\xfd\x45\x94\xce\x65\x0c\xcd\x25\x0b\xfc\x1e\x03\x72\x47\x00\x3d\xfa\x1f\xd4\xa3\x54\x51\x95\x11\x75\xa3\x69\x5c\xa9\xaa\x34\x95\x37\xa2\x06\x4a\x76\xff\x5f\x00\x00\x00\xff\xff\xe4\xa4\xe7\x47\xf6\x25\x00\x00")

func SpecSchemaSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_SpecSchemaSeedManifestSchemaJson,
		"../spec/schema/seed.manifest.schema.json",
	)
}

func SpecSchemaSeedManifestSchemaJson() (*asset, error) {
	bytes, err := SpecSchemaSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../spec/schema/seed.manifest.schema.json", size: 9718, mode: os.FileMode(448), modTime: time.Unix(1501504153, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _SpecSchemaSeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4f\x4f\xe3\x3e\x10\xbd\xe7\x53\x8c\x0c\x07\x10\x2d\x45\x88\xcb\xaf\x17\x84\xf4\x43\x2b\x56\xbb\x14\xd1\x15\x87\x85\x6a\x65\x9a\x49\x6b\x94\xd8\xc1\x76\x85\x2a\xb6\xdf\x7d\x65\xe7\x4f\xed\x34\x81\xb0\x74\x21\x27\x26\x63\xcf\xf8\xcd\x9b\x67\x77\x78\x0e\x00\xc8\xae\x9a\xce\x31\xa1\x64\x08\x64\xae\x75\x3a\x1c\x0c\x1e\x94\xe0\xfd\xcc\x7b\x28\xe4\x6c\x10\x4a\x1a\xe9\xfe\xd1\xc9\x20\xf3\xed\x90\x9e\x89\x63\xe1\x0b\x21\x33\x14\xc6\x65\xfe\x26\xa8\xe5\xf2\xd0\x7c\xe5\x81\x9a\xe9\x18\x4d\x6c\xb1\x98\xb9\x43\x54\x53\xc9\x52\xcd\x04\x37\x8b\x23\x8e\x50\x6c\x00\xaa\x20\xc4\x88\x71\x0c\xe1\x7e\x09\x5f\x50\x7c\x1d\x8f\x2e\xf3\x6c\xcb\xd4\x26\x13\xf7\x0f\x38\xd5\x99\x2f\x95\x22\x45\xa9\x19\x2a\x32\x04\x53\x24\x00\x51\x88\xe1\x0d\x4a\x95\xa5\xcf\x9c\x4e\xb8\xd2\x92\xf1\x99\x0d\xb7\xfe\x94\x6a\x8d\xd2\x22\x19\x9f\x9f\xff\xff\xeb\xe6\xfc\x7a\x7c\x31\xba\x24\x76\x7d\x95\x6d\x5b\x17\x50\x93\xd0\xc1\x63\xfd\x12\x1f\x17\x4c\xa2\x21\xed\x36\xf7\x15\xbb\x7b\xeb\xef\xa9\x10\x32\x64\x9c\x6a\x54\x24\xf7\x4e\xca\x14\x82\xe3\x28\xf2\xe2\x9f\x4b\xcb\xe5\xf5\x4a\x30\xae\x9d\xac\x00\x84\x86\x21\x33\xcc\xd2\xf8\xca\xe5\x26\xa2\xb1\x42\x6f\x63\x0d\x75\x3e\xd8\xaa\x17\x80\x20\x5f\x24\x1e\xac\x72\x25\x43\x52\xf1\x4f\xbc\xef\x55\xcf\x3f\xc4\x65\xa0\xe6\xac\x5d\x89\x86\x02\xb2\x33\xb0\x82\xb0\x45\xa9\x41\x2a\x94\xb5\xfc\xa3\x56\x41\x9d\xed\x1c\x58\x4f\xdf\xf7\x45\xac\x59\x77\x38\x74\xe0\x7c\x1c\x91\x67\x52\xd2\xe5\x56\xd8\xfc\xc6\x38\x8e\xfd\xcb\xf5\x99\x6c\x3a\x70\xfe\x3d\x9b\x71\xc3\x61\xef\x11\x66\xc7\xf8\xac\x62\xda\x26\xa9\xc5\x53\x4a\xad\x18\x7b\xd5\x65\xa6\x31\xa9\x8b\x7b\x73\x3b\xfc\x86\xfc\x75\x7b\xae\x44\xbc\x9c\x09\xde\x89\xb6\x14\x58\x3e\xe2\xc5\xa8\x39\xe9\x7d\x2f\x6f\x77\x68\xf4\x00\x75\x59\xda\xb5\x5d\x68\xa9\xeb\xc0\xad\xa7\x18\x6d\x34\x4b\xb0\xcd\x58\xd3\xa6\x31\x4d\x4d\x21\x4a\x53\xa9\x2b\x65\x36\x4d\x64\x50\x99\xca\x6e\x8f\xfa\xff\x4d\x9e\x4f\x56\xfd\xcc\x38\x5e\x1b\x3f\x0a\x63\xb8\x61\xec\xdd\xdd\x1d\x5a\xfb\x60\xff\x74\x6f\xef\xf6\xa0\x3f\xd9\xd8\xb2\xff\xfb\xe7\xfe\x29\xa9\xd3\x2c\x41\x1e\x76\x1c\x6c\x50\x01\xdd\x30\x75\x66\xbc\x57\x2a\xf3\x65\x10\xe4\x59\x36\x33\x78\x93\x74\x90\xcf\xa7\xc4\x11\xe3\x7a\xe6\x2e\xc7\x32\x47\x48\x95\x31\xff\x0c\x14\xe3\xb3\x18\xa1\xdc\xdb\xab\x4a\xce\xbf\x23\x24\x61\xfc\x22\xbf\x1e\xc7\xa5\xb3\xb8\x30\x4d\xa3\x71\x9e\x8a\x2f\x92\x7b\x94\xb5\xdd\x6d\xb7\x7f\x63\x26\x5f\xeb\xbf\x00\x65\xa5\xef\xdd\x25\x7f\xa8\x7a\x81\x0b\x0e\xb6\x56\x10\x51\x49\x87\x7a\x95\x8f\xcd\xb7\xa2\xe5\x90\xbc\xf2\x40\x3a\x3f\x8e\xed\x10\xea\x27\x01\x42\x42\x22\x24\xd6\xa1\xa5\x71\xfc\xd2\x3f\x2b\x6f\x1a\x3f\x9b\xda\xe4\x4a\xe1\x95\xf7\xcc\x94\x47\xe5\x75\xfb\xf2\x22\xb1\x90\xeb\xba\xe0\x69\x8e\x12\x41\xcf\x11\x22\x26\x95\x06\x7c\x5c\xd0\x58\x59\x47\x4c\x95\xfe\xb4\xba\x4f\x5e\xa9\xbb\xf8\x61\x68\x57\x74\xc6\x12\x18\x15\x6c\x51\x78\x0e\xf7\xbe\xf4\xcc\x23\x13\xac\x82\x3f\x01\x00\x00\xff\xff\xc4\x07\xd0\x40\x87\x10\x00\x00")

func SpecSchemaSeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_SpecSchemaSeedMetadataSchemaJson,
		"../spec/schema/seed.metadata.schema.json",
	)
}

func SpecSchemaSeedMetadataSchemaJson() (*asset, error) {
	bytes, err := SpecSchemaSeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../spec/schema/seed.metadata.schema.json", size: 4231, mode: os.FileMode(448), modTime: time.Unix(1501504153, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../spec/schema/seed.manifest.schema.json": SpecSchemaSeedManifestSchemaJson,
	"../spec/schema/seed.metadata.schema.json": SpecSchemaSeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"spec": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"seed.manifest.schema.json": &bintree{SpecSchemaSeedManifestSchemaJson, map[string]*bintree{}},
				"seed.metadata.schema.json": &bintree{SpecSchemaSeedMetadataSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

