// Code generated by go-bindata.
// sources:
// ../spec/schema/seed.manifest.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SpecSchemaSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x72\xdb\x36\x10\xbe\xf3\x29\x30\x68\x0f\x96\x5d\xda\xca\x4c\x2f\xf6\xa5\xd3\x99\xf8\xd0\x43\xd2\x4e\xd3\xe6\x50\xcb\x93\x81\xc9\x15\x05\x87\x24\x58\x70\x39\x1d\xb7\xd6\xbb\x77\x40\x2a\x16\x7f\x16\x00\xc9\x58\x75\xdb\x28\x97\xc8\xcb\xfd\x05\x3e\x7c\x58\x71\xf5\x57\xc0\x18\xff\xba\x8c\x36\x90\x09\x7e\xc5\xf8\x06\xb1\xb8\xba\xb8\xb8\x2f\x55\x1e\x36\xd2\x73\xa5\x93\x8b\x58\x8b\x35\x86\xcb\x6f\x2f\x1a\xd9\x57\xfc\x1b\x63\x87\x0f\x05\x18\x23\x75\x77\x0f\x11\x36\x32\x11\xc7\x12\xa5\xca\x45\xfa\x93\x56\x05\x68\x94\x50\xf2\x2b\xb6\x16\x69\x09\xb5\x42\xd1\x16\x9b\xf0\x8c\xf1\x12\x20\x7e\x0f\xba\x94\x2a\x7f\x12\xb6\xfc\x97\xa8\x65\x9e\xd4\xfe\x6b\x79\x21\x10\x41\x1b\x55\xfe\xee\xfa\xfa\xf5\x87\xf7\xd7\x3f\xbf\xfb\xe1\xc7\xb7\xbc\x7e\xbe\x6d\xd4\xf8\xbd\xba\xa3\x7c\xb5\x72\xad\xe5\xbe\x7c\x9b\x80\xc3\x9c\x6b\x79\x2e\x32\xe8\x48\xec\x49\xf7\x13\xbf\x11\xe1\x9f\xcb\xf0\xf2\x43\x78\x7b\xc6\x9f\x54\xb6\x7b\x6d\x2e\xd2\x44\x69\x89\x9b\x6c\xb8\x30\x53\xe2\x9c\x2c\x1f\x6f\x5e\x85\x97\xb7\x37\xcb\xf0\xf2\xf6\x74\xb1\x5a\x9d\x7b\x25\x27\x61\x57\xf0\xd8\xfc\x67\x32\xfe\x3e\xfc\x2d\xac\xa5\x9f\x3e\x9f\x2e\x4e\x06\x0e\xdc\xfa\x8b\xd3\xc5\x77\x27\xab\xd5\x59\x5b\x7a\x66\x9c\x74\x04\x46\x8b\x5e\x97\x42\x44\x1f\x45\x02\xc7\x55\xe9\xac\x0a\x4a\x4c\x7d\x50\x24\x0d\x63\x28\x23\x2d\x0b\xf4\xaf\x25\x1d\x57\x24\x36\x33\xa1\xb5\x78\xe8\xee\x80\x44\xc8\xca\x9e\xbe\x23\x10\x63\x5b\xfa\x68\x54\xb8\x51\xfa\xad\xff\xf0\x39\xac\xaf\x33\x21\xd3\xf9\xe6\xbf\xea\x59\xc6\x28\x33\x50\x15\xda\x4c\x65\x8e\x90\x80\xa6\x6d\xa3\xa2\xea\xaf\xdd\x93\x61\x5e\x65\x77\x36\xbb\x0c\xb2\x39\x66\xe5\x46\x68\x88\xdf\x78\x8d\x3b\x1b\x1c\xc3\x5a\x54\xa9\xa9\x6f\x79\xbe\xa4\xdd\xa2\xd2\x22\xb1\x6e\xdc\x3c\xa7\x66\xdd\xf4\x5a\x44\x56\xb7\x3d\xd6\x67\x63\x99\x9f\x39\xd8\xbf\xd9\x94\x2c\x1e\x08\x9d\x88\xee\x24\xbe\x4b\xbe\xa8\xf0\xb5\x40\xe1\x72\x44\x14\x30\xa9\x08\x5f\x21\xf5\xf3\xb5\x4c\x2d\x8f\x9c\xc7\x7a\x5f\x09\x79\xbc\xc7\xd6\x32\xa3\xa2\x71\x75\xed\xb4\x88\xcb\xda\x92\x20\xb5\x6b\xfb\x7f\x5b\x3a\x0b\xc6\xb8\x86\xdf\x2b\xa9\x81\x42\x04\x11\xe5\x4e\xa9\x14\x44\x6e\x59\x07\xd6\x45\x3e\xea\x0a\x26\xe7\x93\x55\x29\xca\x62\x70\x2f\x3c\x47\x3e\xf5\x76\x4c\x4f\x08\x62\x29\x7e\x69\xe2\x8d\xc8\xc8\x0e\xb5\x9d\xa2\x1b\x70\x3d\x6f\xee\x5d\x6d\xdf\x35\xa3\xcb\x79\xa1\xf5\x25\xe5\x96\x34\xdb\xa0\xbc\x71\x1e\x8d\x11\xbb\x46\x6a\xdc\x12\xd2\x61\x8a\x44\x7a\xdc\x7c\xcb\x38\xd2\xcd\xff\x86\x6e\x70\xf4\xc1\x26\xba\xf3\x9e\x26\xe4\x55\xe6\x40\x6c\xad\xe3\xa3\x07\x36\xa6\x68\xb6\xef\xba\x9c\x4a\x44\x63\x32\xd0\x71\x22\x6d\xa7\xe3\x63\x21\xea\x34\xb1\x17\x38\xf4\xf8\xb9\xe7\x3d\x70\xfd\xdd\xef\x81\x54\x85\xc7\x26\x68\x66\x45\xe3\xea\xda\x69\x1d\x9e\x95\x26\xde\xf1\x73\xc3\xec\xbf\xcc\x1f\x30\x48\xa4\xaa\xbc\xff\x65\xcd\x1d\x62\x14\xbb\xf2\x57\x2e\xbd\xf6\x6b\x8a\xfa\x9d\xc1\xd9\xe3\x6a\x75\xba\xf8\xcf\xdc\x0f\x2f\xd6\x9d\x78\xb1\x72\x6c\x5f\xfe\x4d\x44\xf1\x11\x1e\x0e\x1b\xe0\xd8\x8f\x1c\xb2\x1f\xf9\xc2\x69\xe7\x9f\xed\x8f\x32\x73\x11\x51\xe7\xd5\x43\x34\x0e\x92\xf1\x13\xcc\x44\x72\xf1\x13\x8b\x9b\x54\x46\x9c\x77\x72\x3b\x0d\xbd\x6f\x9e\xdf\x6b\xa6\x62\x47\xae\x1e\x3e\xe0\x5a\xd9\xa1\xa3\xff\xb0\x00\xc7\x02\xd6\x56\xe3\xa0\x15\x59\xc0\xa8\xeb\xca\x83\x79\x3b\xde\x9b\x05\x1e\x3c\xe8\xe3\xdc\x8d\xe0\x12\x10\x65\x9e\x1c\x31\x4c\xa3\xad\x84\x48\x83\xbd\xd5\x1c\x49\x97\x23\x5e\x20\x3d\x23\x56\xa6\x22\x22\xa0\x3e\xb7\x5f\xe3\x83\xd6\x4a\xbf\x11\x45\x61\x96\xee\xd9\xa6\x4a\x24\x36\x26\xe0\xc2\x8d\x09\x1e\xd9\x78\xc2\x3e\xd5\x19\x54\xfe\xc9\x80\x18\xe2\xf5\x7c\xd1\xb8\x1a\xba\xb2\x8f\xf5\x66\x3a\x8c\x04\x42\xa2\x34\xdd\xb2\xf9\x1b\xa9\x36\x89\x3d\x4d\xb6\x29\x3d\x07\xb1\x3a\x0d\x4d\x08\x81\x82\x7e\x52\x3e\x94\x08\xd9\xe7\x52\x98\xe3\x50\x34\x28\xb0\x6c\x68\x60\x0b\xd9\x3a\x05\x41\x2f\x24\x1d\xac\xcf\xd1\xc3\x1f\x09\xd8\x07\xe5\x83\x61\xb1\x65\x08\x4c\xcf\x59\x89\x19\x66\x7f\x34\xd9\x1b\x39\x92\xe3\xb9\xa0\xbd\x08\xa6\xe8\xba\xe0\x61\xb1\x9d\x5f\x84\x34\x9e\xea\x1f\x74\x04\xc6\x76\x1b\xfc\x1d\x00\x00\xff\xff\xb7\x4c\x35\x71\xb6\x22\x00\x00")

func SpecSchemaSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_SpecSchemaSeedManifestSchemaJson,
		"../spec/schema/seed.manifest.schema.json",
	)
}

func SpecSchemaSeedManifestSchemaJson() (*asset, error) {
	bytes, err := SpecSchemaSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../spec/schema/seed.manifest.schema.json", size: 8886, mode: os.FileMode(436), modTime: time.Unix(1500991168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../spec/schema/seed.manifest.schema.json": SpecSchemaSeedManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"spec": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"seed.manifest.schema.json": &bintree{SpecSchemaSeedManifestSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

