// Code generated by go-bindata.
// sources:
// ../spec/schema/seed.manifest.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SpecSchemaSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x10\x6c\x0f\x7e\x54\xb1\x03\xf4\xb2\x7b\x29\x0a\xc4\x87\x1e\x92\x16\x4d\x9b\x43\x6d\x23\xa0\xa5\xb1\xcc\x8d\x24\xaa\x14\xd5\xc2\xed\xfa\xbf\x17\x94\xbc\x6b\x59\x1a\x3e\xe4\xac\x77\xdb\xc6\xb9\xc4\x3b\x1c\xce\x83\xfc\xe6\x41\x91\x7f\x0f\x08\xa1\x5f\x17\xe1\x16\x52\x46\x6f\x09\xdd\x2a\x95\xdf\x4e\xa7\x77\x85\xc8\x82\x9a\xfa\x4a\xc8\x78\x1a\x49\xb6\x51\xc1\xec\xdb\x69\x4d\xfb\x8a\x7e\xa3\xe7\xa9\x5d\x0e\x7a\x92\x58\xdf\x41\xa8\x6a\x1a\x8b\x22\xae\xb8\xc8\x58\xf2\x93\x14\x39\x48\xc5\xa1\xa0\xb7\x64\xc3\x92\x02\x2a\x86\xbc\x49\xd6\xea\x09\xa1\x05\x40\xf4\x01\x64\xc1\x45\xf6\x48\x6c\xc8\x2f\x94\xe4\x59\x5c\xc9\xaf\xe8\x39\x53\x0a\xa4\x66\xa5\xef\xe7\xf3\x37\x1f\x3f\xcc\x7f\x7e\xff\xc3\x8f\xef\x68\x35\xbe\xaf\xd9\xe8\x9d\x58\x63\xb2\x1a\xb6\x56\x74\x97\xbd\xb5\xc2\xae\xcd\x15\x3d\x63\x29\x9c\x50\xcc\x46\xb7\x0d\x5f\xb0\xe0\xaf\x59\x70\xf3\x31\x58\x4d\xe8\x23\xcb\xfe\xc8\x4d\x59\x12\x0b\xc9\xd5\x36\xed\x2e\x4c\x1f\x3d\xc3\xd9\xfd\xe2\x75\x70\xb3\x5a\xcc\x82\x9b\xd5\x78\xb4\x5c\xbe\x72\x52\x86\xc1\x29\xe1\xbe\xfe\x4f\x5b\xfc\x7d\xf0\x5b\x50\x51\x1f\x7e\x8f\x47\xc3\x8e\x00\x3b\xff\x68\x3c\xfa\x6e\xb8\x5c\x4e\x9a\xd4\x89\x16\x72\x42\xd0\x5c\xf8\xba\xe4\x2c\xfc\xc4\x62\xb8\xae\xca\xc9\xaa\x28\xae\x12\x17\x14\xd1\x89\x11\x14\xa1\xe4\xb9\x72\xaf\x25\xae\x97\xc5\xa6\x69\x4c\x4a\xb6\x3b\xdd\x01\xae\x20\x2d\x5a\xfc\x16\x45\x84\xec\xf1\xd0\x28\xd5\x56\xc8\x77\xee\xe0\xb3\xcc\x9e\xa7\x8c\x27\xe7\x4f\xff\x55\x9e\x35\x59\xf1\x14\x44\xa9\x4c\x53\x79\xa6\x20\x06\x89\xcf\xd5\x83\x72\xc3\x42\xa3\xd3\xad\xd4\x46\x7c\xd3\x1b\xb1\xa4\xb8\x6a\x2c\x4c\xa3\x0e\xd1\xba\x6d\x27\x86\x1f\x8c\xcf\x4b\xf5\x86\x29\x66\x13\x84\x38\xd0\xcb\x09\x97\x23\xd5\xf8\x86\x27\x86\x21\x2b\x76\x8f\x9e\xa0\x18\xf6\xf5\xe5\x0c\x8f\xfc\xfc\x3a\x70\x21\x15\xc9\x60\x20\xb6\x6b\xc7\x7f\x7b\xdc\x0a\x42\xa8\x84\xdf\x4b\x2e\x01\x43\x04\xa2\x65\x2d\x44\x02\x2c\x33\xac\x03\xa9\x33\xd0\x86\x95\x89\x8e\x09\x25\x4b\xe8\x6d\x4f\x0a\x11\x67\xbf\xd4\xea\x3c\x0c\x32\xef\xec\x81\xd1\xbe\xbf\x2d\x69\xf6\x45\x6c\xe6\x2f\x6f\x77\xca\x44\xf1\xbc\x93\xcb\x0d\xfa\x7b\x2d\x6f\x85\x2e\x93\x41\x28\xdd\x60\x66\x13\x03\x0b\x2b\x12\x3d\x76\x0d\xe5\x58\x21\xd4\xae\x89\x88\x79\x54\x77\xae\xd7\xe8\xfe\xdf\x44\xb7\xf2\x0e\x6c\xa4\xe3\x6b\x71\x42\x56\xa6\x16\xc4\x56\x3c\xae\xf4\x40\x7c\x9c\x26\xc7\x4a\x6e\x65\xca\xca\x74\xed\xe2\xb1\x22\xed\xc0\xe3\xca\x42\x58\x34\x91\x17\x08\x7a\xf5\xb9\xf1\x3e\xb0\xfd\xdd\x6e\x39\x44\xa9\xae\x3d\xc7\x99\x1e\xf9\xf9\x75\xe0\xba\x7c\x56\xea\x59\xe3\xcf\x55\x73\x3c\x20\x5e\x50\x49\x28\xca\xac\x7d\x00\xb0\xab\xf0\xca\xae\xf4\xb5\x8d\xaf\x79\xf4\xad\xce\xa1\x93\xfb\xe5\x72\x3c\xfa\xcf\xd4\x87\x17\xeb\x4e\x9c\x58\xb9\xb6\x2f\xff\xa6\x44\xf1\x09\x76\x97\x55\x70\xed\x47\x2e\xd9\x8f\x7c\xe1\x69\xe7\x79\xfb\xa3\x54\x17\x22\x2c\x5e\x1d\x89\xc6\x92\x64\xdc\x09\xa6\x67\x72\x71\x27\x16\x7b\x52\xf1\x88\x77\x74\x3b\x75\x7a\xdf\x3e\xbd\xd4\x54\x44\x16\x5b\x1d\xf9\x80\x4a\x61\x86\x8e\xfc\xd3\x00\x1c\x03\x58\x1b\x8d\x83\x14\xa8\x03\x5e\xe5\xca\x81\x79\x33\xde\xeb\x05\xee\x0c\xb4\x71\x6e\x47\xb0\x84\x42\x94\x32\x44\xb1\xf1\xbc\x0d\x7e\x11\xb2\x84\xc9\x6b\xe1\x3e\xbb\xae\xfe\xc1\x92\xd2\x53\xc5\xa1\x4a\xf5\x56\x51\x7d\x82\x7e\x5b\x7f\x5e\xe3\x60\xda\xac\x7e\xca\x9e\xb9\x40\xd4\xab\xe4\x5f\x21\x50\xa8\x39\xcd\x78\x40\x33\x32\xd8\xd5\xd2\xaf\xe6\x14\xa0\x14\xcf\xe2\x6b\xd5\xc1\xb7\xa6\x80\x50\x82\xf9\x70\xe8\xd9\xe0\x78\x7c\xf2\x7d\xc2\xec\xde\x37\x87\x0f\xb0\xdf\xcd\x7b\x2e\x90\x52\xc8\xb7\x2c\xcf\xf5\xd2\x3d\xd9\xdd\x22\x8a\x8d\x1e\xb8\xb0\x63\x82\x86\xa6\xca\x6e\xbe\xdb\xeb\x78\xfe\x30\x01\xb9\xca\x6d\xc9\xc2\x71\xd5\x15\x65\xbe\xdc\x3d\x53\x60\xc8\x14\xc4\x42\xe2\x87\x2c\xf7\xd1\xa7\xd9\x76\x3c\xbe\x6f\xc0\xf8\x2c\xad\x90\x75\xa2\x56\xc1\x14\xc3\x47\x8a\x5d\xa1\x20\xfd\xfc\xa6\xc3\x18\x14\x35\x0a\x0c\x1b\x3a\x30\xa9\x6c\x44\xc1\xa0\xa5\x12\x57\xd6\x2e\x12\xdd\xa7\x22\xe6\xe7\x12\x9d\x27\x03\x86\xa7\x00\xf8\x6d\x3b\x72\x93\x8d\x5e\x50\x0f\x9a\x5e\x6a\xaf\x2a\x8f\xba\xde\x9c\x3c\xfc\xa9\x25\x55\xef\x76\x06\x7a\xee\xfe\x9f\x00\x00\x00\xff\xff\x7f\xeb\xbd\xd2\x9c\x24\x00\x00")

func SpecSchemaSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_SpecSchemaSeedManifestSchemaJson,
		"../spec/schema/seed.manifest.schema.json",
	)
}

func SpecSchemaSeedManifestSchemaJson() (*asset, error) {
	bytes, err := SpecSchemaSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../spec/schema/seed.manifest.schema.json", size: 9372, mode: os.FileMode(420), modTime: time.Unix(1501069797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../spec/schema/seed.manifest.schema.json": SpecSchemaSeedManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"spec": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"seed.manifest.schema.json": &bintree{SpecSchemaSeedManifestSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

