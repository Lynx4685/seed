// Code generated by go-bindata.
// sources:
// data/seed.manifest.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcd\x6f\xec\x34\x10\xbf\xf7\xaf\x88\x02\x87\x6e\x4b\xb6\xfb\x04\x97\xf6\x82\x90\xe0\xf8\x10\x07\x78\x07\xba\x15\x72\x93\xd9\xac\xfb\x92\x38\x38\x93\x87\x0a\xed\xff\x8e\xb2\x69\x93\x0d\xf1\xc7\xd8\xfb\xd1\xa5\x4a\x2e\xad\xec\xf9\xf2\x78\x66\x7e\xb6\xd7\xfe\xe7\x2c\x08\x82\x20\xfc\xba\x8a\xd7\x90\xb3\xf0\x26\x08\xd7\x88\xe5\xcd\xd5\xd5\x43\x25\x8a\xa8\x6d\x9d\x0b\x99\x5e\x25\x92\xad\x30\x5a\x7c\x77\xd5\xb6\x7d\x15\x7e\xd3\x72\xe2\x63\x09\x0d\x9b\xb8\x7f\x80\x18\x5f\x5b\x59\x92\x70\xe4\xa2\x60\xd9\x2f\x52\x94\x20\x91\x43\x15\xde\x04\x2b\x96\x55\xf0\x42\x52\x6e\x77\xb4\x66\x6c\xda\x73\x56\xf0\x15\x54\xf8\x09\x64\xc5\x45\x31\xe8\x1c\x68\xac\x50\xf2\x22\x7d\xd1\xd8\xf5\x96\x0c\x11\x64\xc3\x16\x2e\xe6\x8b\xf9\xb7\x61\xd7\xfd\xdc\x53\x86\x0f\xe2\x5e\x2f\x78\x30\x94\xae\xd7\x3e\xa4\xde\x06\xf5\xd0\xba\xfe\x82\xe5\xa0\xec\xb1\x8f\x4f\x35\xce\x5b\x16\xfd\xbd\x88\xae\xff\x88\xee\x2e\xc3\x11\xf1\xf3\x98\x3f\x64\x59\x2a\x24\xc7\x75\xae\xf3\xb1\xbf\x2d\xe7\x8b\xa7\xdb\x0f\xd1\xf5\xdd\xed\x22\xba\xbe\xbb\x98\x2d\x97\x73\x6b\xcb\x79\x34\x6c\x78\x6a\xff\x34\xa3\xfa\x21\xfa\x3d\xda\xb4\xbe\xfe\x7f\x31\x3b\x1f\x09\x30\xd3\xcf\x2e\x66\xdf\x9f\x2f\x97\x97\xdb\xad\x97\x8d\x90\x41\x43\x43\x45\xf3\x5d\xc9\xe2\xcf\x2c\x85\xc9\x73\xce\x9e\x43\x8e\x19\x3d\xec\x49\x22\x13\xa8\x62\xc9\x4b\x74\x99\x09\x9a\xad\x2c\xb5\x0b\x64\x52\xb2\x47\xdd\xcc\x72\x84\x5c\x9d\xfe\x64\xc3\x36\xc6\xd1\x12\xba\xc6\xb5\x90\x3f\xbb\x94\x15\x07\xb9\x3f\xe5\x8c\x67\x87\x10\xfc\x9b\xdc\xb3\x58\xe4\x39\x88\x1a\xed\x42\x79\x81\x90\x82\xa4\x49\x8d\xcb\x5a\x3f\x93\x9d\xc8\xa2\xce\xef\xa9\x12\x73\xc8\xf7\x2b\xb0\x5a\x33\x09\xc9\x47\x07\xb1\x9a\xb0\x4d\x60\xc5\xea\xac\xf1\xe0\x62\xbe\xa0\xa9\x46\x21\x59\x4a\x08\xbc\x7d\x2b\x6e\xe6\x50\xae\x58\x4c\x50\xad\x44\xf4\x8e\x8a\x8e\xec\x1d\x8b\x05\xe1\x7b\xd1\x32\x35\x53\x04\xd4\x42\x10\xa8\xbd\xd0\xc9\xe0\x45\x59\xe3\x8f\x0c\x19\x5d\x9d\xd1\x2b\xfd\x10\x9c\xbd\xd3\xb1\x12\xbd\xd4\xd1\xaf\x78\x46\x24\x0d\xa8\x75\x78\xc4\x64\xaf\xcb\x5a\x3d\x24\x7f\x0d\x38\xfd\x7d\x37\x10\xe3\xe8\xc7\x01\xaf\x71\xad\x69\xe4\xa4\x46\xa5\xea\x33\x44\xaa\x52\x97\x84\x3f\x6b\x2e\x21\xd9\xcd\xd2\x7b\x21\x32\x60\x85\xc3\x0c\x75\x22\xfa\xf2\x83\xb2\x86\x83\x8e\x35\x87\x84\xb3\x5f\x5b\x93\x77\x18\xac\x4b\xd4\x0f\x04\xb8\x67\x80\x52\xbf\x4f\x58\x04\xca\x15\xcd\x7e\xa8\x1d\xa6\x61\x3b\xdc\x6e\x3d\xd2\xc9\x7b\xc2\xc9\x7c\x77\x24\x4a\xbb\x73\x08\x4e\x09\x9b\x9d\xfe\x54\x74\x47\x62\xa6\xa2\x4b\xb3\xf4\xff\x51\x74\x71\xe7\x7a\x6b\xdc\xc8\x1b\x25\x40\x51\xe7\xce\x95\xa6\xe3\xf6\xad\xf3\x1b\x66\xff\xc9\x09\x5e\x97\xd8\xa9\x76\xcd\x6e\x65\x37\xae\xf8\xad\xdc\xce\x99\x3f\xe0\xf6\x85\x27\x5a\xe5\x7d\xfd\xde\x03\x3c\xe1\xdb\x20\x93\x91\x42\xdf\x6b\xda\x03\x89\x1a\xa7\x4d\x10\x85\x69\xc2\x63\x2a\xe7\x31\xf1\x78\x4f\x1b\x83\x63\x98\xda\x9f\x5b\x9f\xb8\xa1\xb1\xa8\x0b\xfd\x79\xa0\x8b\x99\x3b\xad\x6f\xc2\x0f\x3e\xfc\xdb\xbf\x0e\x6c\x8e\xea\x2f\x9f\x96\xcb\x8b\xd9\xb4\x2a\xd4\x7d\xef\x01\x8e\xfb\x2a\xe0\x99\x93\xd3\x26\x93\x42\x1e\x4c\xa0\x76\x94\x02\xfc\x19\x1e\x4f\xdf\xc8\x69\x77\xe8\xc3\x3e\xed\x0e\x2d\xdf\x04\xbd\x4a\xca\x93\x85\xde\xf7\xb3\x13\x86\xe2\xcb\x27\x26\x1d\x7e\x7a\xa4\xd4\x11\x07\x84\x75\x47\xd6\x1d\x11\xd5\x07\x49\xdd\x11\xd4\x0b\x94\x88\xf1\x1e\x7e\x61\x59\x7d\x0c\x73\xf6\xb2\x9e\x73\x4e\x4c\x97\x84\x7c\x71\x85\x95\xd6\x9c\x81\x7e\x99\x93\x37\x1b\xc6\x29\x71\xcc\x3c\xa7\x95\x38\x25\xc3\xf5\xe9\x58\x93\x8b\xc4\xd1\x37\x5e\x2b\xc0\x50\x0a\x57\x78\x93\x7f\x39\x80\x9b\x03\x48\x6f\x1d\x73\x48\xf1\x7e\x8a\xd0\x26\xac\xde\xa4\x06\x55\x80\xc8\x0b\x97\x9b\x43\x53\x15\x22\x71\x1c\x32\xef\x2b\x88\x25\xb8\x1d\x35\xee\xb0\x64\xdf\x4a\xba\x8d\x8b\x4f\x3f\xeb\x0e\x97\x49\xca\x1e\xcd\x48\xec\xd6\x8f\xcd\x50\x5d\x3e\x04\x29\x85\xfc\xc8\xca\xb2\x89\xa3\xa3\xdd\x14\xb6\xa6\xa3\x67\x1a\xba\xa4\x5f\x18\x53\x01\xce\x7e\xdb\x76\xfb\xb3\x84\x9e\xe5\xfa\xb8\x52\x2f\x25\xcd\x6d\x6a\x29\x57\xcc\x0f\xa6\x3c\x66\x08\xa9\x90\xb4\x13\x34\xf7\xb3\xa8\x6d\xe4\xee\xde\x84\x50\xf8\x9c\x56\x2c\x4e\xa2\x5b\xb3\x18\x32\x2a\x6d\xf5\x58\x21\xe4\x6f\x83\xd3\xe4\x4a\xd8\xe6\x0c\x29\xc0\xb5\x34\xea\x01\x28\xde\x07\x0c\x5a\xfe\x63\xbe\xd9\x64\xdd\xf2\x68\xfc\x60\xc8\xfe\x30\x46\xfb\x00\xc4\xf2\x8c\xc3\xfc\xba\xc1\x70\xe7\x5f\x77\x71\x5f\x73\xfd\xde\x78\xa1\x7c\xd0\xd7\x3b\xbe\x75\xed\x8b\x4b\xd5\xae\x1c\x3d\x5f\xeb\xf5\x6c\x1e\x9d\x9d\xb5\x12\x9f\xcf\xfe\x0d\x00\x00\xff\xff\xa3\x31\x86\x7c\x79\x37\x00\x00")

func dataSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataSeedManifestSchemaJson,
		"data/seed.manifest.schema.json",
	)
}

func dataSeedManifestSchemaJson() (*asset, error) {
	bytes, err := dataSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/seed.manifest.schema.json", size: 14201, mode: os.FileMode(420), modTime: time.Unix(1500320188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/seed.manifest.schema.json": dataSeedManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"seed.manifest.schema.json": &bintree{dataSeedManifestSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

